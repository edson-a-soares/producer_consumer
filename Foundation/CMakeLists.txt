#-----------------------------------------------------------------------------
# It defines basic component information.
#-----------------------------------------------------------------------------
set(COMPONENT_NAME "Foundation")

# Component's binary name.
set(COMPONENT_BINARY_NAME ${APPLICATION_MODULE_PREFIX}_${COMPONENT_NAME})

# It defines the basic symbols visibility.
set(CMAKE_CXX_VISIBILITY_PRESET hidden)

# It makes build-time defined constants available in the application code
include(CMakeAutogenerated)

#-----------------------------------------------------------------------------
# Component source code handling
#-----------------------------------------------------------------------------
set(PROJECT_INCLUDE_DIR ${CMAKE_HOME_DIRECTORY}/${COMPONENT_NAME}/include)
set(PROJECT_SOURCE_DIR ${CMAKE_HOME_DIRECTORY}/${COMPONENT_NAME}/src)

file(GLOB_RECURSE COMMON_SOURCE_FILES ${PROJECT_SOURCE_DIR}/*.cpp)

include_directories("${PROJECT_INCLUDE_DIR}")
include_directories("${PROJECT_SOURCE_DIR}")

add_library(${COMPONENT_BINARY_NAME} SHARED ${COMMON_SOURCE_FILES})
target_include_directories(${COMPONENT_BINARY_NAME} PUBLIC ${PROJECT_INCLUDE_DIR})

# It makes the application directory path available into the C++ source code as a constant.
add_definitions(-DHOME_DIRECTORY="${CMAKE_HOME_DIRECTORY}")

#-----------------------------------------------------------------------------
# POCO libraries setup
#-----------------------------------------------------------------------------
find_library(POCO_FOUNDATION PocoFoundation)
find_library(POCO_UTIL PocoUtil)
find_library(POCO_XML PocoXML)
find_library(POCO_JSON PocoJSON)
find_library(POCO_NET PocoNet)

include_directories(${Poco_INCLUDE_DIRS})
set(DEPENDENCIES_LIBS ${DEPENDENCIES_LIBS} ${POCO_FOUNDATION} ${POCO_UTIL} ${POCO_XML} ${POCO_JSON} ${POCO_NET})

#-----------------------------------------------------------------------------
# Boost libraries setup
#-----------------------------------------------------------------------------
set(BUILD_SHARED_LIBS           ON)
set(BOOST_DATE_TIME_NO_LIB      ON)
set(Boost_USE_MULTITHREADED     ON)
set(Boost_USE_RELEASE_LIBS      ON)
set(Boost_USE_DEBUG_LIBS        OFF)
set(Boost_USE_STATIC_RUNTIME    OFF)

find_package(Boost 1.70 REQUIRED locale filesystem system)
if(NOT Boost_FOUND)
    message(WARNING "Failed to find the Boost libraries.")
endif()

find_library(Boost_Locale boost_locale)
find_library(Boost_System boost_system)
find_library(Boost_FileSystem boost_filesystem)

link_directories(${Boost_LIBRARY_DIRS})
include_directories(${Boost_INCLUDE_DIRS})
add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})
set(DEPENDENCIES_LIBS ${DEPENDENCIES_LIBS} ${Boost_Locale} ${Boost_System} ${Boost_FileSystem})

#-----------------------------------------------------------------------------
# Threads
#-----------------------------------------------------------------------------
find_package(Threads REQUIRED)

# It links the dependencies to the application
target_link_libraries(${COMPONENT_BINARY_NAME} ${DEPENDENCIES_LIBS} -lpthread -lrt)

#-----------------------------------------------------------------------------
# Component's optional parts
#-----------------------------------------------------------------------------
if (ENABLE_TESTS)
    add_subdirectory(test)
    message(STATUS "Building ${COMPONENT_NAME} with tests")
elseif ()
    message(STATUS "Building ${COMPONENT_NAME} without tests")
endif ()

#-----------------------------------------------------------------------------
# Handle component installation
#-----------------------------------------------------------------------------
install(TARGETS ${COMPONENT_BINARY_NAME} DESTINATION ${APPLICATION_LIBRARY_DIRECTORY})
